{"message":"expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `:`","code":null,"level":"error","spans":[{"file_name":"src/main.rs","byte_start":46086,"byte_end":46087,"line_start":537,"line_end":537,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"        params_type: \"ApprovalBased\",","highlight_start":20,"highlight_end":21}],"label":"expected one of 8 possible tokens","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `:`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:537:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m537\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        params_type: \"ApprovalBased\",\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of 8 possible tokens\u001b[0m\n\n"}
{"message":"the name `Http` is defined multiple times","code":{"code":"E0252","explanation":"Two items of the same name cannot be imported without rebinding one of the\nitems under a new local name.\n\nErroneous code example:\n\n```compile_fail,E0252\nuse foo::baz;\nuse bar::baz; // error, do `use bar::baz as quux` instead\n\nfn main() {}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n\nYou can use aliases in order to fix this error. Example:\n\n```\nuse foo::baz as foo_baz;\nuse bar::baz; // ok!\n\nfn main() {}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n\nOr you can reference the item with its parent:\n\n```\nuse bar::baz;\n\nfn main() {\n    let x = foo::baz; // ok!\n}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":651,"byte_end":672,"line_start":34,"line_end":34,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"use ethers::prelude::Http;","highlight_start":5,"highlight_end":26}],"label":"`Http` reimported here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":436,"byte_end":440,"line_start":25,"line_end":25,"column_start":17,"column_end":21,"is_primary":false,"text":[{"text":"    providers::{Http, Provider},","highlight_start":17,"highlight_end":21}],"label":"previous import of the type `Http` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Http` must be defined only once in the type namespace of this module","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove unnecessary import","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":647,"byte_end":673,"line_start":34,"line_end":34,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"use ethers::prelude::Http;","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0252]\u001b[0m\u001b[0m\u001b[1m: the name `Http` is defined multiple times\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:34:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    providers::{Http, Provider},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mprevious import of the type `Http` here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ethers::prelude::Http;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`Http` reimported here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Http` must be defined only once in the type namespace of this module\u001b[0m\n\n"}
{"message":"unresolved import `ethers::ethers_signers`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":585,"byte_end":599,"line_start":32,"line_end":32,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"use ethers::ethers_signers::Signer;","highlight_start":13,"highlight_end":27}],"label":"could not find `ethers_signers` in `ethers`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `ethers::ethers_signers`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:32:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ethers::ethers_signers::Signer;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `ethers_signers` in `ethers`\u001b[0m\n\n"}
{"message":"unresolved import `zksync_eth_signer`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":679,"byte_end":696,"line_start":36,"line_end":36,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"use zksync_eth_signer::JsonRpcSigner;","highlight_start":5,"highlight_end":22}],"label":"use of undeclared crate or module `zksync_eth_signer`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `zksync_eth_signer`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:36:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse zksync_eth_signer::JsonRpcSigner;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `zksync_eth_signer`\u001b[0m\n\n"}
{"message":"unresolved import `zksync_eth_signer`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":717,"byte_end":734,"line_start":37,"line_end":37,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"use zksync_eth_signer::PrivateKeySigner;","highlight_start":5,"highlight_end":22}],"label":"use of undeclared crate or module `zksync_eth_signer`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `zksync_eth_signer`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:37:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse zksync_eth_signer::PrivateKeySigner;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `zksync_eth_signer`\u001b[0m\n\n"}
{"message":"cannot find type `T` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":10739,"byte_end":10740,"line_start":445,"line_end":445,"column_start":27,"column_end":28,"is_primary":true,"text":[{"text":"const paymaster_abi: Json<T> = serde_json::from_str(paymaster_abi_json).expect(\"Failed to parse JSON\");","highlight_start":27,"highlight_end":28}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `T` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:445:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m445\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mconst paymaster_abi: Json<T> = serde_json::from_str(paymaster_abi_json).ex\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find type `Bytes` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":10844,"byte_end":10849,"line_start":447,"line_end":447,"column_start":27,"column_end":32,"is_primary":true,"text":[{"text":"const paymaster_bytecode: Bytes = \"0x0004000000000002000900000000000200000000030100190000006003300270000001bb0430019700030000004103550002000000010355000001bb0030019d000100000000001f0000000101200190000000380000c13d0000008001000039000000400010043f0000000002000031000000040120008c000000470000413d0000000201000367000000000301043b000000e003300270000001c30430009c000000950000a13d000001c40430009c000000c30000213d000001c80430009c000001f40000613d000001c90130009c0000019d0000613d000001ca0130009c000002450000c13d0000000001000416000000000101004b000002450000c13d000000040100008a0000000001100031000001bd02000041000000000301004b00000000030000190000000003024019000001bd01100197000000000401004b000000000200a019000001bd0110009c00000000010300190000000001026019000000000101004b000002450000c13d000000000100041a000001be01100197000000400200043d0000000000120435000001bb01000041000001bb0320009c00000000010240190000004001100210000001d5011001c7000006e70001042e0000000001000416000000000101004b000002450000c13d00000000010000310000009f02100039000000200300008a000000000232016f000001bc0320009c0000004b0000413d000001e90100004100000000001004350000004101000039000000040010043f000001ea01000041000006e800010430000000000102004b000002450000c13d0000000001000019000006e70001042e000000400020043f0000001f0210018f00000002030003670000000504100272000000590000613d00000000050000190000000506500210000000000763034f000000000707043b000000800660003900000000007604350000000105500039000000000645004b000000510000413d000000000502004b000000680000613d0000000504400210000000000343034f00000003022002100000008004400039000000000504043300000000052501cf000000000525022f000000000303043b0000010002200089000000000323022f00000000022301cf000000000252019f0000000000240435000001bd02000041000000200310008c00000000030000190000000003024019000001bd01100197000000000401004b000000000200a019000001bd0110009c00000000010300190000000001026019000000000101004b000002450000c13d000000800300043d000001be0130009c000002450000213d000000000200041a000001bf012001970000000006000411000000000161019f000000000010041b000001bb01000041000900000003001d0000000003000414000001bb0430009c0000000001034019000000c001100210000001c0011001c7000001be052001970000800d020000390000000303000039000001c10400004106e606dc0000040f00000009030000290000000101200190000002450000613d0000000101000039000000000201041a000001bf02200197000000000232019f000000000021041b000000200100003900000100001004430000012000000443000001c201000041000006e70001042e000001cb0430009c000000fb0000a13d000001cc0130009c000001d80000613d000001cd0130009c000001720000613d000001ce0130009c000002450000c13d0000000001000416000000000101004b000002450000c13d000000040100008a0000000001100031000001bd02000041000000000301004b00000000030000190000000003024019000001bd01100197000000000401004b000000000200a019000001bd0110009c00000000010300190000000001026019000000000101004b000002450000c13d000000000100041a000001be021001970000000005000411000000000252004b000002520000c13d000001bf01100197000000000010041b000001bb010000410000000002000414000001bb0320009c0000000001024019000000c001100210000001c0011001c70000800d020000390000000303000039000001c104000041000000000600001906e606dc0000040f0000000101200190000002450000613d000000490000013d000001c50130009c000002340000613d000001c60130009c000001b90000613d000001c70130009c000002450000c13d0000000001000416000000000101004b000002450000c13d000000040100008a0000000001100031000001bd02000041000000200310008c00000000030000190000000003024019000001bd01100197000000000401004b000000000200a019000001bd0110009c00000000010300190000000001026019000000000101004b000002450000c13d00000004010000390000000201100367000000000601043b000001be0160009c000002450000213d000000000100041a000001be021001970000000005000411000000000252004b000002520000c13d000000000206004b0000026f0000c13d000000400100043d0000006402100039000001d10300004100000000003204350000004402100039000001d2030000410000000000320435000000240210003900000026030000390000000000320435000001d3020000410000000000210435000000040210003900000020030000390000000000320435000001bb02000041000001bb0310009c00000000010280190000004001100210000001d4011001c7000006e800010430000001cf0430009c0000011a0000613d000001d00130009c000002450000c13d0000000001000416000000000101004b000002450000c13d000000040100008a0000000001100031000001bd02000041000000000301004b00000000030000190000000003024019000001bd01100197000000000401004b000000000200a019000001bd0110009c00000000010300190000000001026019000000000101004b000002450000c13d0000000401000039000000000101041a000000400200043d0000000000120435000001bb01000041000001bb0320009c00000000010240190000004001100210000001d5011001c7000006e70001042e000000040320008a000001bd04000041000000600530008c00000000050000190000000005044019000001bd03300197000000000603004b000000000400a019000001bd0330009c00000000030500190000000003046019000000000303004b000002450000c13d0000004403100370000000000a03043b000001d603a0009c000002450000213d0000000403a000390000000004320049000001bd05000041000002600640008c00000000060000190000000006054019000001bd04400197000000000704004b000000000500a019000001bd0440009c00000000040600190000000004056019000000000404004b000002450000c13d0000000004000411000080010440008c000002630000c13d0000022404a00039000000000441034f0000000005a20049000000230550008a000000000404043b000001bd06000041000000000754004b00000000070000190000000007068019000001bd05500197000001bd08400197000000000958004b0000000006008019000000000558013f000001bd0550009c00000000050700190000000005066019000000000505004b000002450000c13d0000000003340019000000000431034f000000000404043b000001d60540009c000002450000213d00000000054200490000002002300039000001bd06000041000000000752004b00000000070000190000000007062019000001bd05500197000001bd08200197000000000958004b0000000006008019000000000558013f000001bd0550009c00000000050700190000000005066019000000000505004b000002450000c13d000000030540008c0000027f0000213d000001d301000041000000800010043f0000002001000039000000840010043f0000003a01000039000000a40010043f000001ee01000041000000c40010043f000001ef01000041000000e40010043f000001db01000041000006e8000104300000000001000416000000000101004b000002450000c13d000000040100008a0000000001100031000001bd02000041000000400310008c00000000030000190000000003024019000001bd01100197000000000401004b000000000200a019000001bd0110009c00000000010300190000000001026019000000000101004b000002450000c13d00000002010003670000000402100370000000000302043b000001be0230009c000002450000213d0000002401100370000000000201043b000001be0120009c000002450000213d000800000003001d000900000002001d06e605bb0000040f0000000201000039000000000201041a000001bf022001970000000803000029000000000232019f000000000021041b0000000301000039000000000201041a000001bf022001970000000903000029000000000232019f000000000021041b0000000001000019000006e70001042e0000000001000416000000000101004b000002450000c13d000000040100008a0000000001100031000001bd02000041000000000301004b00000000030000190000000003024019000001bd01100197000000000401004b000000000200a019000001bd0110009c00000000010300190000000001026019000000000101004b000002450000c13d0000000101000039000000000101041a000001be01100197000000400200043d0000000000120435000001bb01000041000001bb0320009c00000000010240190000004001100210000001d5011001c7000006e70001042e0000000001000416000000000101004b000002450000c13d000000040100008a0000000001100031000001bd02000041000000200310008c00000000030000190000000003024019000001bd01100197000000000401004b000000000200a019000001bd0110009c00000000010300190000000001026019000000000101004b000002450000c13d00000004010000390000000201100367000000000101043b000001be0210009c000002450000213d06e605d20000040f000000400200043d0000000000120435000001bb01000041000001bb0320009c00000000010240190000004001100210000001d5011001c7000006e70001042e0000000001000416000000000101004b000002450000c13d000000040100008a0000000001100031000001bd02000041000000000301004b00000000030000190000000003024019000001bd01100197000000000401004b000000000200a019000001bd0110009c00000000010300190000000001026019000000000101004b000002450000c13d0000000201000039000000000101041a000001be01100197000000400200043d0000000000120435000001bb01000041000001bb0320009c00000000010240190000004001100210000001d5011001c7000006e70001042e000000040320008a000001bd04000041000000c00530008c00000000050000190000000005044019000001bd06300197000000000706004b000000000400a019000001bd0660009c000000000405c019000000000404004b000002450000c13d0000000404100370000000000404043b000001d60540009c000002450000213d0000002305400039000001bd06000041000000000725004b00000000070000190000000007068019000001bd08200197000001bd05500197000000000985004b0000000006008019000000000585013f000001bd0550009c00000000050700190000000005066019000000000505004b000002450000c13d0000000405400039000000000551034f000000000505043b000001d60650009c000002450000213d00000000045400190000002404400039000000000224004b000002450000213d0000002402100370000000000202043b000001d60420009c000002450000213d0000000002230049000001bd03000041000002600420008c00000000040000190000000004034019000001bd02200197000000000502004b000000000300a019000001bd0220009c00000000020400190000000002036019000000000202004b000002450000c13d0000008401100370000000000101043b000000010110008c000002450000213d06e606c30000040f0000000001000019000006e70001042e0000000001000416000000000101004b000002450000c13d000000040100008a0000000001100031000001bd02000041000000000301004b00000000030000190000000003024019000001bd01100197000000000401004b000000000200a019000001bd0110009c00000000010300190000000001026019000000000101004b000002470000613d0000000001000019000006e8000104300000000301000039000000000101041a000001be01100197000000400200043d0000000000120435000001bb01000041000001bb0320009c00000000010240190000004001100210000001d5011001c7000006e70001042e000000400100043d0000004402100039000001d7030000410000000000320435000001d302000041000000000021043500000024021000390000002003000039000000000032043500000004021000390000000000320435000001bb02000041000001bb0310009c00000000010280190000004001100210000001d8011001c7000006e800010430000001d301000041000000800010043f0000002001000039000000840010043f0000002401000039000000a40010043f000001d901000041000000c40010043f000001da01000041000000e40010043f000001db01000041000006e800010430000001bf01100197000000000161019f000000000010041b000001bb010000410000000002000414000001bb0320009c0000000001024019000000c001100210000001c0011001c70000800d020000390000000303000039000001c10400004106e606dc0000040f0000000101200190000000490000c13d000002450000013d000000000221034f000000000202043b000001dc02200197000001dd0220009c000002f50000c13d000000040240008a000000600420008c000002450000413d0000002404300039000000000541034f000000000505043b000900000005001d000001be0550009c000002450000213d0000006405300039000000000551034f0000004403300039000000000331034f000000000303043b000800000003001d000000000305043b000001d60530009c000002450000213d000000000242001900000000034300190000001f04300039000001bd05000041000000000624004b00000000060000190000000006058019000001bd04400197000001bd07200197000000000874004b0000000005008019000000000474013f000001bd0440009c00000000040600190000000004056019000000000404004b000002450000c13d00070000000a001d000000000131034f000000000101043b000001d60410009c000000410000213d000000bf04100039000000200500008a000000000454016f000001d60540009c000000410000213d000000400040043f000000800010043f00000020033000390000000004310019000000000224004b000002450000213d0000001f0210018f00000002033003670000000504100272000002c40000613d00000000050000190000000506500210000000000763034f000000000707043b000000a00660003900000000007604350000000105500039000000000645004b000002bc0000413d000000000502004b000002d30000613d0000000504400210000000000343034f0000000302200210000000a004400039000000000504043300000000052501cf000000000525022f000000000303043b0000010002200089000000000323022f00000000022301cf000000000252019f0000000000240435000000a00110003900000000000104350000000101000039000000000101041a000001be011001970000000902000029000000000112004b000002ff0000c13d000000070100002900000024011000390000000201100367000000000101043b000000400400043d000001e10200004100000000002404350000000002000410000001be032001970000002402400039000300000003001d0000000000320435000001be02100197000600000004001d0000000401400039000400000002001d000000000021043500000000010004140000000902000029000000040220008c000003110000c13d0000000103000031000000200130008c00000020040000390000000004034019000003440000013d000001d301000041000000800010043f0000002001000039000000840010043f0000001a01000039000000a40010043f000001de01000041000000c40010043f000001df01000041000006e800010430000000400100043d0000004402100039000001e003000041000000000032043500000024021000390000000d030000390000000000320435000001d3020000410000000000210435000000040210003900000020030000390000000000320435000001bb02000041000001bb0310009c00000000010280190000004001100210000001d8011001c7000006e800010430000001bb02000041000001bb0310009c00000000010280190000000604000029000001bb0340009c00000000020440190000004002200210000000c001100210000000000121019f000001e2011001c7000000090200002906e606e10000040f000000060a00002900000000030100190000006003300270000001bb03300197000000200430008c000000200400003900000000040340190000001f0540018f0000000506400272000003300000613d0000000007000019000000050870021000000000098a0019000000000881034f000000000808043b00000000008904350000000107700039000000000867004b000003280000413d000000000705004b000003400000613d0000000506600210000000000761034f000000060800002900000000066800190000000305500210000000000806043300000000085801cf000000000858022f000000000707043b0000010005500089000000000757022f00000000055701cf000000000585019f0000000000560435000100000003001f00030000000103550000000102200190000003660000613d0000001f01400039000000600110018f00000006020000290000000002210019000000000112004b00000000010000190000000101004039000500000002001d000001d60220009c000000410000213d0000000101100190000000410000c13d0000000501000029000000400010043f000000200130008c000002450000413d00000006010000290000000001010433000100000001001d0000000301000039000000000201041a000001e30100004100000005030000290000000001130436000200000001001d0000000001000414000001be02200197000000040320008c0000038c0000c13d0000000103000031000000400130008c00000040040000390000000004034019000003be0000013d000000400200043d0000001f0430018f0000000503300272000003730000613d000000000500001900000005065002100000000007620019000000000661034f000000000606043b00000000006704350000000105500039000000000635004b0000036b0000413d000000000504004b000003820000613d0000000503300210000000000131034f00000000033200190000000304400210000000000503043300000000054501cf000000000545022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000151019f0000000000130435000001bb010000410000000103000031000001bb0430009c0000000003018019000001bb0420009c000000000102401900000040011002100000006002300210000000000112019f000006e800010430000001bb03000041000001bb0410009c00000000010380190000000505000029000001bb0450009c00000000030540190000004003300210000000c001100210000000000131019f000001e4011001c706e606e10000040f000000050a00002900000000030100190000006003300270000001bb03300197000000400430008c000000400400003900000000040340190000001f0540018f0000000506400272000003aa0000613d0000000007000019000000050870021000000000098a0019000000000881034f000000000808043b00000000008904350000000107700039000000000867004b000003a20000413d000000000705004b000003ba0000613d0000000506600210000000000761034f000000050800002900000000066800190000000305500210000000000806043300000000085801cf000000000858022f000000000707043b0000010005500089000000000757022f00000000055701cf000000000585019f0000000000560435000100000003001f00030000000103550000000102200190000003e70000613d0000001f01400039000000e00110018f00000005020000290000000001210019000600000001001d000001d60110009c000000410000213d0000000601000029000000400010043f000000400130008c000002450000413d00000005010000290000000001010433000001e502100198000001e6020000410000000002006019000001e703100197000000000232019f000000000221004b000002450000c13d00000002020000290000000002020433000001bb0220009c000002450000213d0000000202000039000000000202041a000001e30300004100000006040000290000000003340436000500000003001d000001e801100197000200000001001d0000000001000414000001be02200197000000040320008c0000040d0000c13d0000000103000031000000400130008c000000400400003900000000040340190000043f0000013d000000400200043d0000001f0430018f0000000503300272000003f40000613d000000000500001900000005065002100000000007620019000000000661034f000000000606043b00000000006704350000000105500039000000000635004b000003ec0000413d000000000504004b000004030000613d0000000503300210000000000131034f00000000033200190000000304400210000000000503043300000000054501cf000000000545022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000151019f0000000000130435000001bb010000410000000103000031000001bb0430009c0000000003018019000001bb0420009c000000000102401900000040011002100000006002300210000000000112019f000006e800010430000001bb03000041000001bb0410009c00000000010380190000000605000029000001bb0450009c00000000030540190000004003300210000000c001100210000000000131019f000001e4011001c706e606e10000040f000000060a00002900000000030100190000006003300270000001bb03300197000000400430008c000000400400003900000000040340190000001f0540018f00000005064002720000042b0000613d0000000007000019000000050870021000000000098a0019000000000881034f000000000808043b00000000008904350000000107700039000000000867004b000004230000413d000000000705004b0000043b0000613d0000000506600210000000000761034f000000060800002900000000066800190000000305500210000000000806043300000000085801cf000000000858022f000000000707043b0000010005500089000000000757022f00000000055701cf000000000585019f0000000000560435000100000003001f00030000000103550000000102200190000004780000613d0000001f01400039000000e00110018f00000006020000290000000001210019000001d60210009c000000410000213d000000400010043f000000400130008c0000000704000029000002450000413d00000006010000290000000001010433000001e502100198000001e6020000410000000002006019000001e703100197000000000232019f000000000221004b000002450000c13d00000005020000290000000002020433000001bb0220009c000002450000213d00000064024000390000000203000367000000000223034f000000a404400039000000000343034f000001e801100197000000000303043b000000000402043b00000000523400a9000000000504004b000004640000613d00000000544200d9000000000334004b0000049e0000c13d0000000403000039000000000023041b000600000003001d000000000303041a000000020200002900000000422300a9000000000403004b000004700000613d00000000433200d90000000204000029000000000343004b0000049e0000c13d000000000301004b000004a40000c13d000001e90100004100000000001004350000001201000039000000040010043f000001ea01000041000006e800010430000000400200043d0000001f0430018f0000000503300272000004850000613d000000000500001900000005065002100000000007620019000000000661034f000000000606043b00000000006704350000000105500039000000000635004b0000047d0000413d000000000504004b000004940000613d0000000503300210000000000131034f00000000033200190000000304400210000000000503043300000000054501cf000000000545022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000151019f0000000000130435000001bb010000410000000103000031000001bb0430009c0000000003018019000001bb0420009c000000000102401900000040011002100000006002300210000000000112019f000006e800010430000001e90100004100000000001004350000001101000039000000040010043f000001ea01000041000006e80001043000000000121200d9000000400100043d000700000001001d0000000101000029000500000002001d000000000121004b000004bd0000813d00000007030000290000004401300039000001ed02000041000000000021043500000024013000390000001c020000390000000000210435000001d3010000410000000000130435000000040130003900000020020000390000000000210435000001bb01000041000001bb0230009c00000000010340190000004001100210000001d8011001c7000006e8000104300000000703000029000000440130003900000005020000290000000000210435000000240130003900000003020000290000000000210435000001eb01000041000000000013043500000004013000390000000402000029000000000021043500000000010004140000000902000029000000040220008c000004d20000c13d0000000103000031000000200130008c00000020040000390000000004034019000005050000013d000001bb02000041000001bb0310009c00000000010280190000000704000029000001bb0340009c00000000020440190000004002200210000000c001100210000000000121019f000001d8011001c7000000090200002906e606dc0000040f00000000030100190000006003300270000001bb03300197000000200430008c000000200400003900000000040340190000001f0540018f0000000506400272000004f10000613d0000000007000019000000050870021000000007090000290000000009890019000000000881034f000000000808043b00000000008904350000000107700039000000000867004b000004e80000413d000000000705004b000005010000613d0000000506600210000000000761034f000000070800002900000000066800190000000305500210000000000806043300000000085801cf000000000858022f000000000707043b0000010005500089000000000757022f00000000055701cf000000000585019f0000000000560435000100000003001f00030000000103550000000101200190000005420000613d0000001f01400039000000600210018f00000007010000290000000001120019000000000221004b00000000020000190000000102004039000001d60410009c000000410000213d0000000102200190000000410000c13d000000400010043f000000200130008c000002450000413d00000007010000290000000001010433000000000201004b0000000002000019000000010200c039000000000121004b000002450000c13d0000000601000029000000000301041a000001bb04000041000900000004001d0000000001000414000001bb0210009c0000000001048019000000c001100210000001c0021001c7000000000403004b000000000102c019000080090200003900008001020060390000800104000039000000000500001906e606dc0000040f000800000002001d00000000020100190000006002200270000101bb0020019d000300000001035506e6065a0000040f0000000801000029000000010110018f06e606ab0000040f000000400100043d000800000001001d06e605a10000040f00000008040000290000000001410049000001bb0210009c00000009030000290000000001038019000001bb0240009c0000000002030019000000000204401900000040022002100000006001100210000000000121019f000006e70001042e0000006001000039000000000203004b0000056f0000613d0000003f01300039000001ec02100197000000400100043d0000000002210019000000000412004b00000000040000190000000104004039000001d60520009c000000410000213d0000000104400190000000410000c13d000000400020043f0000000002310436000000030300036700000001050000310000001f0450018f0000000505500272000005600000613d000000000600001900000005076002100000000008720019000000000773034f000000000707043b00000000007804350000000106600039000000000756004b000005580000413d000000000604004b0000056f0000613d0000000505500210000000000353034f00000000025200190000000304400210000000000502043300000000054501cf000000000545022f000000000303043b0000010004400089000000000343022f00000000034301cf000000000353019f000000000032043500000008020000290000000503000029000000000223004b000005840000a13d000000400200043d000900000002001d000001d3010000410000000000120435000000040120003906e606910000040f00000009040000290000000001410049000001bb02000041000001bb0310009c0000000001028019000001bb0340009c000000000204401900000040022002100000006001100210000000000121019f000006e8000104300000000021010434000000050310008c000005900000413d000001bb03000041000001bb0420009c0000000002038019000001bb0410009c000000000103801900000060011002100000004002200210000000000121019f000006e800010430000000400200043d000900000002001d000001d3010000410000000000120435000000040120003906e6069e0000040f00000009040000290000000001410049000001bb02000041000001bb0310009c0000000001028019000001bb0340009c000000000204401900000040022002100000006001100210000000000121019f000006e800010430000000200210003900000040030000390000000000320435000001f00200004100000000002104350000004003100039000000600200043d00000000002304350000006001100039000000000302004b000005b40000613d000000000300001900000000043100190000008005300039000000000505043300000000005404350000002003300039000000000423004b000005ad0000413d000000000321001900000000000304350000001f02200039000000200300008a000000000232016f0000000001210019000000000001042d000000000100041a000001be011001970000000002000411000000000121004b000005c10000c13d000000000001042d000000400100043d0000004402100039000001d7030000410000000000320435000001d302000041000000000021043500000024021000390000002003000039000000000032043500000004021000390000000000320435000001bb02000041000001bb0310009c00000000010280190000004001100210000001d8011001c7000006e8000104300002000000000002000000400a00043d000001e30200004100000000052a04360000000003000414000001be02100197000000040120008c000005df0000c13d0000000103000031000000400130008c00000040040000390000000004034019000006120000013d000200000005001d000001bb01000041000001bb0430009c0000000003018019000001bb04a0009c00000000010a40190000004001100210000000c003300210000000000113019f000001e4011001c700010000000a001d06e606e10000040f000000010a00002900000000030100190000006003300270000001bb03300197000000400430008c000000400400003900000000040340190000001f0540018f0000000506400272000005fe0000613d0000000007000019000000050870021000000000098a0019000000000881034f000000000808043b00000000008904350000000107700039000000000867004b000005f60000413d000000000705004b0000060d0000613d0000000506600210000000000761034f00000000066a00190000000305500210000000000806043300000000085801cf000000000858022f000000000707043b0000010005500089000000000757022f00000000055701cf000000000585019f0000000000560435000100000003001f000300000001035500000001022001900000000205000029000006340000613d0000001f01400039000000e00210018f0000000001a20019000000000221004b00000000020000190000000102004039000001d60410009c0000062e0000213d00000001022001900000062e0000c13d000000400010043f000000400130008c0000062c0000413d00000000010a0433000001e502100198000001e6020000410000000002006019000001e703100197000000000232019f000000000221004b0000062c0000c13d0000000002050433000001bb0220009c0000062c0000213d000001e801100197000000000001042d0000000001000019000006e800010430000001e90100004100000000001004350000004101000039000000040010043f000001ea01000041000006e800010430000000400200043d0000001f0430018f0000000503300272000006410000613d000000000500001900000005065002100000000007620019000000000661034f000000000606043b00000000006704350000000105500039000000000635004b000006390000413d000000000504004b000006500000613d0000000503300210000000000131034f00000000033200190000000304400210000000000503043300000000054501cf000000000545022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000151019f0000000000130435000001bb010000410000000103000031000001bb0430009c0000000003018019000001bb0420009c000000000102401900000040011002100000006002300210000000000112019f000006e800010430000000600100003900000001020000320000068a0000613d000001bc0120009c0000068b0000813d0000003f01200039000000200300008a000000000331016f000000400100043d0000000003310019000000000413004b00000000040000190000000104004039000001d60530009c0000068b0000213d00000001044001900000068b0000c13d000000400030043f0000000002210436000000030300036700000001050000310000001f0450018f00000005055002720000067b0000613d000000000600001900000005076002100000000008720019000000000773034f000000000707043b00000000007804350000000106600039000000000756004b000006730000413d000000000604004b0000068a0000613d0000000505500210000000000353034f00000000025200190000000304400210000000000502043300000000054501cf000000000545022f000000000303043b0000010004400089000000000343022f00000000034301cf000000000353019f0000000000320435000000000001042d000001e90100004100000000001004350000004101000039000000040010043f000001ea01000041000006e8000104300000006002100039000001f10300004100000000003204350000004002100039000001f2030000410000000000320435000000200210003900000026030000390000000000320435000000200200003900000000002104350000008001100039000000000001042d0000006002100039000001f30300004100000000003204350000004002100039000001f403000041000000000032043500000020021000390000002a030000390000000000320435000000200200003900000000002104350000008001100039000000000001042d000000000101004b000006ae0000613d000000000001042d000000400100043d0000006402100039000001f50300004100000000003204350000004402100039000001f603000041000000000032043500000024021000390000002a030000390000000000320435000001d3020000410000000000210435000000040210003900000020030000390000000000320435000001bb02000041000001bb0310009c00000000010280190000004001100210000001d4011001c7000006e8000104300000000001000411000080010110008c000006c70000c13d000000000001042d000000400100043d0000006402100039000001da0300004100000000003204350000004402100039000001d9030000410000000000320435000000240210003900000024030000390000000000320435000001d3020000410000000000210435000000040210003900000020030000390000000000320435000001bb02000041000001bb0310009c00000000010280190000004001100210000001d4011001c7000006e800010430000006df002104210000000102000039000000000001042d0000000002000019000000000001042d000006e4002104230000000102000039000000000001042d0000000002000019000000000001042d000006e600000432000006e70001042e000006e80001043000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff00000000000000000000000000000000000000000000000100000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000008be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000000000000000000000000000817b17ef00000000000000000000000000000000000000000000000000000000d56d017d00000000000000000000000000000000000000000000000000000000d56d017e00000000000000000000000000000000000000000000000000000000eecfe32600000000000000000000000000000000000000000000000000000000f2fde38b00000000000000000000000000000000000000000000000000000000817b17f00000000000000000000000000000000000000000000000000000000085fa292f000000000000000000000000000000000000000000000000000000008da5cb5b00000000000000000000000000000000000000000000000000000000574cd14c00000000000000000000000000000000000000000000000000000000574cd14d000000000000000000000000000000000000000000000000000000006321728c00000000000000000000000000000000000000000000000000000000715018a600000000000000000000000000000000000000000000000000000000038a24bc0000000000000000000000000000000000000000000000000000000049eea8c964647265737300000000000000000000000000000000000000000000000000004f776e61626c653a206e6577206f776e657220697320746865207a65726f206108c379a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000840000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657200000000000000000000000000000000000000640000000000000000000000004f6e6c7920626f6f746c6f616465722063616e2063616c6c2074686973206d6574686f64000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084000000800000000000000000ffffffff00000000000000000000000000000000000000000000000000000000949431dc00000000000000000000000000000000000000000000000000000000556e737570706f72746564207061796d617374657220666c6f770000000000000000000000000000000000000000000000000064000000800000000000000000496e76616c696420746f6b656e00000000000000000000000000000000000000dd62ed3e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004400000000000000000000000057de26a40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000080000000000000000000000000000000000000000000000000000000ffffffff80000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff4e487b7100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000000000000000000000023b872dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ffffffe04d696e20706179696e6720616c6c6f77616e636520746f6f206c6f7700000000546865207374616e64617264207061796d617374657220696e707574206d757374206265206174206c656173742034206279746573206c6f6e67000000000000038a24bc00000000000000000000000000000000000000000000000000000000732073656e7400000000000000000000000000000000000000000000000000004e6f742074686520726571756972656420616d6f756e74206f6620746f6b656e7327206163636f756e74000000000000000000000000000000000000000000004661696c656420746f207472616e7366657246726f6d2066726f6d2075736572626f6f746c6f61646572000000000000000000000000000000000000000000004661696c656420746f207472616e736665722066756e647320746f2074686520000000000000000000000000000000000000000000000000000000000000000054573335e3e00cdba5d117780a58bc306ca07ab725ecec553986cc41b0614702\";","highlight_start":27,"highlight_end":32}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":156,"byte_end":156,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use axum::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use alloy_primitives::Bytes;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/main.rs","byte_start":156,"byte_end":156,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use axum::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use axum::body::Bytes;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/main.rs","byte_start":156,"byte_end":156,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use axum::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use core::str::Bytes;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/main.rs","byte_start":156,"byte_end":156,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use axum::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use ethers::abi::Bytes;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/main.rs","byte_start":156,"byte_end":156,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use axum::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use ethers::types::Bytes;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/main.rs","byte_start":156,"byte_end":156,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use axum::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use hyper::body::Bytes;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/main.rs","byte_start":156,"byte_end":156,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use axum::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use std::io::Bytes;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/main.rs","byte_start":156,"byte_end":156,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use axum::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use std::str::Bytes;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `Bytes` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:447:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m447\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mconst paymaster_bytecode: Bytes = \"0x0004000000000002000900000000000200000\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use alloy_primitives::Bytes;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use axum::body::Bytes;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use core::str::Bytes;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use ethers::abi::Bytes;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m      and 4 other candidates\u001b[0m\n\n"}
{"message":"cannot find value `payload` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":44342,"byte_end":44349,"line_start":493,"line_end":493,"column_start":22,"column_end":29,"is_primary":true,"text":[{"text":"    let to_address = payload.address.parse::<Address>()?;","highlight_start":22,"highlight_end":29}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `payload` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:493:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m493\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let to_address = payload.address.parse::<Address>()?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find value `payload` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":44397,"byte_end":44404,"line_start":495,"line_end":495,"column_start":18,"column_end":25,"is_primary":true,"text":[{"text":"    let amount = payload.amount;","highlight_start":18,"highlight_end":25}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `payload` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:495:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m495\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let amount = payload.amount;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find value `PaymasterContract` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":45653,"byte_end":45670,"line_start":527,"line_end":527,"column_start":18,"column_end":35,"is_primary":true,"text":[{"text":"    let ETHUSD = PaymasterContract.readDapi(\"0x28ce555ee7a3daCdC305951974FcbA59F5BdF09b\");","highlight_start":18,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a local variable with a similar name exists","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":45653,"byte_end":45670,"line_start":527,"line_end":527,"column_start":18,"column_end":35,"is_primary":true,"text":[{"text":"    let ETHUSD = PaymasterContract.readDapi(\"0x28ce555ee7a3daCdC305951974FcbA59F5BdF09b\");","highlight_start":18,"highlight_end":35}],"label":null,"suggested_replacement":"paymaster_contract","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `PaymasterContract` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:527:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let ETHUSD = PaymasterContract.readDapi(\"0x28ce555ee7a3daCdC305951974F\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a local variable with a similar name exists: `paymaster_contract`\u001b[0m\n\n"}
{"message":"cannot find value `PaymasterContract` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":45762,"byte_end":45779,"line_start":530,"line_end":530,"column_start":19,"column_end":36,"is_primary":true,"text":[{"text":"    let USDCUSD = PaymasterContract.readDapi(\"0x946E3232Cc18E812895A8e83CaE3d0caA241C2AB\");","highlight_start":19,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a local variable with a similar name exists","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":45762,"byte_end":45779,"line_start":530,"line_end":530,"column_start":19,"column_end":36,"is_primary":true,"text":[{"text":"    let USDCUSD = PaymasterContract.readDapi(\"0x946E3232Cc18E812895A8e83CaE3d0caA241C2AB\");","highlight_start":19,"highlight_end":36}],"label":null,"suggested_replacement":"paymaster_contract","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `PaymasterContract` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:530:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m530\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let USDCUSD = PaymasterContract.readDapi(\"0x946E3232Cc18E812895A8e83Ca\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a local variable with a similar name exists: `paymaster_contract`\u001b[0m\n\n"}
{"message":"unused import: `http::StatusCode`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":198,"byte_end":214,"line_start":9,"line_end":9,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"    http::StatusCode,","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":192,"byte_end":214,"line_start":8,"line_end":9,"column_start":25,"column_end":21,"is_primary":true,"text":[{"text":"    routing::{get, post},","highlight_start":25,"highlight_end":26},{"text":"    http::StatusCode,","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `http::StatusCode`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    http::StatusCode,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `serde_json::json`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":280,"byte_end":296,"line_start":15,"line_end":15,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"use serde_json::json;","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":276,"byte_end":297,"line_start":15,"line_end":15,"column_start":1,"column_end":22,"is_primary":true,"text":[{"text":"use serde_json::json;","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `serde_json::json`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:15:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde_json::json;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `ethers::prelude::Http`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":651,"byte_end":672,"line_start":34,"line_end":34,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"use ethers::prelude::Http;","highlight_start":5,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":647,"byte_end":673,"line_start":34,"line_end":34,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"use ethers::prelude::Http;","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `ethers::prelude::Http`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:34:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ethers::prelude::Http;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1397,"byte_end":10660,"line_start":49,"line_end":442,"column_start":36,"column_end":6,"is_primary":true,"text":[{"text":"const paymaster_abi_json: String = r#\"[","highlight_start":36,"highlight_end":40},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      \"inputs\": [","highlight_start":1,"highlight_end":18},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"internalType\": \"address\",","highlight_start":1,"highlight_end":37},{"text":"          \"name\": \"_erc20\",","highlight_start":1,"highlight_end":28},{"text":"          \"type\": \"address\"","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      ],","highlight_start":1,"highlight_end":9},{"text":"      \"stateMutability\": \"nonpayable\",","highlight_start":1,"highlight_end":39},{"text":"      \"type\": \"constructor\"","highlight_start":1,"highlight_end":28},{"text":"    },","highlight_start":1,"highlight_end":7},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      \"anonymous\": false,","highlight_start":1,"highlight_end":26},{"text":"      \"inputs\": [","highlight_start":1,"highlight_end":18},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"indexed\": true,","highlight_start":1,"highlight_end":27},{"text":"          \"internalType\": \"address\",","highlight_start":1,"highlight_end":37},{"text":"          \"name\": \"previousOwner\",","highlight_start":1,"highlight_end":35},{"text":"          \"type\": \"address\"","highlight_start":1,"highlight_end":28},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"indexed\": true,","highlight_start":1,"highlight_end":27},{"text":"          \"internalType\": \"address\",","highlight_start":1,"highlight_end":37},{"text":"          \"name\": \"newOwner\",","highlight_start":1,"highlight_end":30},{"text":"          \"type\": \"address\"","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      ],","highlight_start":1,"highlight_end":9},{"text":"      \"name\": \"OwnershipTransferred\",","highlight_start":1,"highlight_end":38},{"text":"      \"type\": \"event\"","highlight_start":1,"highlight_end":22},{"text":"    },","highlight_start":1,"highlight_end":7},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      \"inputs\": [],","highlight_start":1,"highlight_end":20},{"text":"      \"name\": \"ETHdAPIProxy\",","highlight_start":1,"highlight_end":30},{"text":"      \"outputs\": [","highlight_start":1,"highlight_end":19},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"internalType\": \"address\",","highlight_start":1,"highlight_end":37},{"text":"          \"name\": \"\",","highlight_start":1,"highlight_end":22},{"text":"          \"type\": \"address\"","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      ],","highlight_start":1,"highlight_end":9},{"text":"      \"stateMutability\": \"view\",","highlight_start":1,"highlight_end":33},{"text":"      \"type\": \"function\"","highlight_start":1,"highlight_end":25},{"text":"    },","highlight_start":1,"highlight_end":7},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      \"inputs\": [],","highlight_start":1,"highlight_end":20},{"text":"      \"name\": \"USDCdAPIProxy\",","highlight_start":1,"highlight_end":31},{"text":"      \"outputs\": [","highlight_start":1,"highlight_end":19},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"internalType\": \"address\",","highlight_start":1,"highlight_end":37},{"text":"          \"name\": \"\",","highlight_start":1,"highlight_end":22},{"text":"          \"type\": \"address\"","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      ],","highlight_start":1,"highlight_end":9},{"text":"      \"stateMutability\": \"view\",","highlight_start":1,"highlight_end":33},{"text":"      \"type\": \"function\"","highlight_start":1,"highlight_end":25},{"text":"    },","highlight_start":1,"highlight_end":7},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      \"inputs\": [],","highlight_start":1,"highlight_end":20},{"text":"      \"name\": \"allowedToken\",","highlight_start":1,"highlight_end":30},{"text":"      \"outputs\": [","highlight_start":1,"highlight_end":19},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"internalType\": \"address\",","highlight_start":1,"highlight_end":37},{"text":"          \"name\": \"\",","highlight_start":1,"highlight_end":22},{"text":"          \"type\": \"address\"","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      ],","highlight_start":1,"highlight_end":9},{"text":"      \"stateMutability\": \"view\",","highlight_start":1,"highlight_end":33},{"text":"      \"type\": \"function\"","highlight_start":1,"highlight_end":25},{"text":"    },","highlight_start":1,"highlight_end":7},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      \"inputs\": [],","highlight_start":1,"highlight_end":20},{"text":"      \"name\": \"owner\",","highlight_start":1,"highlight_end":23},{"text":"      \"outputs\": [","highlight_start":1,"highlight_end":19},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"internalType\": \"address\",","highlight_start":1,"highlight_end":37},{"text":"          \"name\": \"\",","highlight_start":1,"highlight_end":22},{"text":"          \"type\": \"address\"","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      ],","highlight_start":1,"highlight_end":9},{"text":"      \"stateMutability\": \"view\",","highlight_start":1,"highlight_end":33},{"text":"      \"type\": \"function\"","highlight_start":1,"highlight_end":25},{"text":"    },","highlight_start":1,"highlight_end":7},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      \"inputs\": [","highlight_start":1,"highlight_end":18},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"internalType\": \"bytes\",","highlight_start":1,"highlight_end":35},{"text":"          \"name\": \"_context\",","highlight_start":1,"highlight_end":30},{"text":"          \"type\": \"bytes\"","highlight_start":1,"highlight_end":26},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"components\": [","highlight_start":1,"highlight_end":26},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"uint256\",","highlight_start":1,"highlight_end":41},{"text":"              \"name\": \"txType\",","highlight_start":1,"highlight_end":32},{"text":"              \"type\": \"uint256\"","highlight_start":1,"highlight_end":32},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"uint256\",","highlight_start":1,"highlight_end":41},{"text":"              \"name\": \"from\",","highlight_start":1,"highlight_end":30},{"text":"              \"type\": \"uint256\"","highlight_start":1,"highlight_end":32},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"uint256\",","highlight_start":1,"highlight_end":41},{"text":"              \"name\": \"to\",","highlight_start":1,"highlight_end":28},{"text":"              \"type\": \"uint256\"","highlight_start":1,"highlight_end":32},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"uint256\",","highlight_start":1,"highlight_end":41},{"text":"              \"name\": \"gasLimit\",","highlight_start":1,"highlight_end":34},{"text":"              \"type\": \"uint256\"","highlight_start":1,"highlight_end":32},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"uint256\",","highlight_start":1,"highlight_end":41},{"text":"              \"name\": \"gasPerPubdataByteLimit\",","highlight_start":1,"highlight_end":48},{"text":"              \"type\": \"uint256\"","highlight_start":1,"highlight_end":32},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"uint256\",","highlight_start":1,"highlight_end":41},{"text":"              \"name\": \"maxFeePerGas\",","highlight_start":1,"highlight_end":38},{"text":"              \"type\": \"uint256\"","highlight_start":1,"highlight_end":32},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"uint256\",","highlight_start":1,"highlight_end":41},{"text":"              \"name\": \"maxPriorityFeePerGas\",","highlight_start":1,"highlight_end":46},{"text":"              \"type\": \"uint256\"","highlight_start":1,"highlight_end":32},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"uint256\",","highlight_start":1,"highlight_end":41},{"text":"              \"name\": \"paymaster\",","highlight_start":1,"highlight_end":35},{"text":"              \"type\": \"uint256\"","highlight_start":1,"highlight_end":32},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"uint256\",","highlight_start":1,"highlight_end":41},{"text":"              \"name\": \"nonce\",","highlight_start":1,"highlight_end":31},{"text":"              \"type\": \"uint256\"","highlight_start":1,"highlight_end":32},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"uint256\",","highlight_start":1,"highlight_end":41},{"text":"              \"name\": \"value\",","highlight_start":1,"highlight_end":31},{"text":"              \"type\": \"uint256\"","highlight_start":1,"highlight_end":32},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"uint256[4]\",","highlight_start":1,"highlight_end":44},{"text":"              \"name\": \"reserved\",","highlight_start":1,"highlight_end":34},{"text":"              \"type\": \"uint256[4]\"","highlight_start":1,"highlight_end":35},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"bytes\",","highlight_start":1,"highlight_end":39},{"text":"              \"name\": \"data\",","highlight_start":1,"highlight_end":30},{"text":"              \"type\": \"bytes\"","highlight_start":1,"highlight_end":30},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"bytes\",","highlight_start":1,"highlight_end":39},{"text":"              \"name\": \"signature\",","highlight_start":1,"highlight_end":35},{"text":"              \"type\": \"bytes\"","highlight_start":1,"highlight_end":30},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"bytes32[]\",","highlight_start":1,"highlight_end":43},{"text":"              \"name\": \"factoryDeps\",","highlight_start":1,"highlight_end":37},{"text":"              \"type\": \"bytes32[]\"","highlight_start":1,"highlight_end":34},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"bytes\",","highlight_start":1,"highlight_end":39},{"text":"              \"name\": \"paymasterInput\",","highlight_start":1,"highlight_end":40},{"text":"              \"type\": \"bytes\"","highlight_start":1,"highlight_end":30},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"bytes\",","highlight_start":1,"highlight_end":39},{"text":"              \"name\": \"reservedDynamic\",","highlight_start":1,"highlight_end":41},{"text":"              \"type\": \"bytes\"","highlight_start":1,"highlight_end":30},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"          ],","highlight_start":1,"highlight_end":13},{"text":"          \"internalType\": \"struct Transaction\",","highlight_start":1,"highlight_end":48},{"text":"          \"name\": \"_transaction\",","highlight_start":1,"highlight_end":34},{"text":"          \"type\": \"tuple\"","highlight_start":1,"highlight_end":26},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"internalType\": \"bytes32\",","highlight_start":1,"highlight_end":37},{"text":"          \"name\": \"\",","highlight_start":1,"highlight_end":22},{"text":"          \"type\": \"bytes32\"","highlight_start":1,"highlight_end":28},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"internalType\": \"bytes32\",","highlight_start":1,"highlight_end":37},{"text":"          \"name\": \"\",","highlight_start":1,"highlight_end":22},{"text":"          \"type\": \"bytes32\"","highlight_start":1,"highlight_end":28},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"internalType\": \"enum ExecutionResult\",","highlight_start":1,"highlight_end":50},{"text":"          \"name\": \"_txResult\",","highlight_start":1,"highlight_end":31},{"text":"          \"type\": \"uint8\"","highlight_start":1,"highlight_end":26},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"internalType\": \"uint256\",","highlight_start":1,"highlight_end":37},{"text":"          \"name\": \"_maxRefundedGas\",","highlight_start":1,"highlight_end":37},{"text":"          \"type\": \"uint256\"","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      ],","highlight_start":1,"highlight_end":9},{"text":"      \"name\": \"postTransaction\",","highlight_start":1,"highlight_end":33},{"text":"      \"outputs\": [],","highlight_start":1,"highlight_end":21},{"text":"      \"stateMutability\": \"payable\",","highlight_start":1,"highlight_end":36},{"text":"      \"type\": \"function\"","highlight_start":1,"highlight_end":25},{"text":"    },","highlight_start":1,"highlight_end":7},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      \"inputs\": [","highlight_start":1,"highlight_end":18},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"internalType\": \"address\",","highlight_start":1,"highlight_end":37},{"text":"          \"name\": \"_dapiProxy\",","highlight_start":1,"highlight_end":32},{"text":"          \"type\": \"address\"","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      ],","highlight_start":1,"highlight_end":9},{"text":"      \"name\": \"readDapi\",","highlight_start":1,"highlight_end":26},{"text":"      \"outputs\": [","highlight_start":1,"highlight_end":19},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"internalType\": \"uint256\",","highlight_start":1,"highlight_end":37},{"text":"          \"name\": \"\",","highlight_start":1,"highlight_end":22},{"text":"          \"type\": \"uint256\"","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      ],","highlight_start":1,"highlight_end":9},{"text":"      \"stateMutability\": \"view\",","highlight_start":1,"highlight_end":33},{"text":"      \"type\": \"function\"","highlight_start":1,"highlight_end":25},{"text":"    },","highlight_start":1,"highlight_end":7},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      \"inputs\": [],","highlight_start":1,"highlight_end":20},{"text":"      \"name\": \"renounceOwnership\",","highlight_start":1,"highlight_end":35},{"text":"      \"outputs\": [],","highlight_start":1,"highlight_end":21},{"text":"      \"stateMutability\": \"nonpayable\",","highlight_start":1,"highlight_end":39},{"text":"      \"type\": \"function\"","highlight_start":1,"highlight_end":25},{"text":"    },","highlight_start":1,"highlight_end":7},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      \"inputs\": [],","highlight_start":1,"highlight_end":20},{"text":"      \"name\": \"requiredETH\",","highlight_start":1,"highlight_end":29},{"text":"      \"outputs\": [","highlight_start":1,"highlight_end":19},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"internalType\": \"uint256\",","highlight_start":1,"highlight_end":37},{"text":"          \"name\": \"\",","highlight_start":1,"highlight_end":22},{"text":"          \"type\": \"uint256\"","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      ],","highlight_start":1,"highlight_end":9},{"text":"      \"stateMutability\": \"view\",","highlight_start":1,"highlight_end":33},{"text":"      \"type\": \"function\"","highlight_start":1,"highlight_end":25},{"text":"    },","highlight_start":1,"highlight_end":7},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      \"inputs\": [","highlight_start":1,"highlight_end":18},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"internalType\": \"address\",","highlight_start":1,"highlight_end":37},{"text":"          \"name\": \"_USDCproxy\",","highlight_start":1,"highlight_end":32},{"text":"          \"type\": \"address\"","highlight_start":1,"highlight_end":28},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"internalType\": \"address\",","highlight_start":1,"highlight_end":37},{"text":"          \"name\": \"_ETHproxy\",","highlight_start":1,"highlight_end":31},{"text":"          \"type\": \"address\"","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      ],","highlight_start":1,"highlight_end":9},{"text":"      \"name\": \"setDapiProxy\",","highlight_start":1,"highlight_end":30},{"text":"      \"outputs\": [],","highlight_start":1,"highlight_end":21},{"text":"      \"stateMutability\": \"nonpayable\",","highlight_start":1,"highlight_end":39},{"text":"      \"type\": \"function\"","highlight_start":1,"highlight_end":25},{"text":"    },","highlight_start":1,"highlight_end":7},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      \"inputs\": [","highlight_start":1,"highlight_end":18},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"internalType\": \"address\",","highlight_start":1,"highlight_end":37},{"text":"          \"name\": \"newOwner\",","highlight_start":1,"highlight_end":30},{"text":"          \"type\": \"address\"","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      ],","highlight_start":1,"highlight_end":9},{"text":"      \"name\": \"transferOwnership\",","highlight_start":1,"highlight_end":35},{"text":"      \"outputs\": [],","highlight_start":1,"highlight_end":21},{"text":"      \"stateMutability\": \"nonpayable\",","highlight_start":1,"highlight_end":39},{"text":"      \"type\": \"function\"","highlight_start":1,"highlight_end":25},{"text":"    },","highlight_start":1,"highlight_end":7},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      \"inputs\": [","highlight_start":1,"highlight_end":18},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"internalType\": \"bytes32\",","highlight_start":1,"highlight_end":37},{"text":"          \"name\": \"\",","highlight_start":1,"highlight_end":22},{"text":"          \"type\": \"bytes32\"","highlight_start":1,"highlight_end":28},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"internalType\": \"bytes32\",","highlight_start":1,"highlight_end":37},{"text":"          \"name\": \"\",","highlight_start":1,"highlight_end":22},{"text":"          \"type\": \"bytes32\"","highlight_start":1,"highlight_end":28},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"components\": [","highlight_start":1,"highlight_end":26},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"uint256\",","highlight_start":1,"highlight_end":41},{"text":"              \"name\": \"txType\",","highlight_start":1,"highlight_end":32},{"text":"              \"type\": \"uint256\"","highlight_start":1,"highlight_end":32},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"uint256\",","highlight_start":1,"highlight_end":41},{"text":"              \"name\": \"from\",","highlight_start":1,"highlight_end":30},{"text":"              \"type\": \"uint256\"","highlight_start":1,"highlight_end":32},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"uint256\",","highlight_start":1,"highlight_end":41},{"text":"              \"name\": \"to\",","highlight_start":1,"highlight_end":28},{"text":"              \"type\": \"uint256\"","highlight_start":1,"highlight_end":32},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"uint256\",","highlight_start":1,"highlight_end":41},{"text":"              \"name\": \"gasLimit\",","highlight_start":1,"highlight_end":34},{"text":"              \"type\": \"uint256\"","highlight_start":1,"highlight_end":32},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"uint256\",","highlight_start":1,"highlight_end":41},{"text":"              \"name\": \"gasPerPubdataByteLimit\",","highlight_start":1,"highlight_end":48},{"text":"              \"type\": \"uint256\"","highlight_start":1,"highlight_end":32},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"uint256\",","highlight_start":1,"highlight_end":41},{"text":"              \"name\": \"maxFeePerGas\",","highlight_start":1,"highlight_end":38},{"text":"              \"type\": \"uint256\"","highlight_start":1,"highlight_end":32},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"uint256\",","highlight_start":1,"highlight_end":41},{"text":"              \"name\": \"maxPriorityFeePerGas\",","highlight_start":1,"highlight_end":46},{"text":"              \"type\": \"uint256\"","highlight_start":1,"highlight_end":32},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"uint256\",","highlight_start":1,"highlight_end":41},{"text":"              \"name\": \"paymaster\",","highlight_start":1,"highlight_end":35},{"text":"              \"type\": \"uint256\"","highlight_start":1,"highlight_end":32},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"uint256\",","highlight_start":1,"highlight_end":41},{"text":"              \"name\": \"nonce\",","highlight_start":1,"highlight_end":31},{"text":"              \"type\": \"uint256\"","highlight_start":1,"highlight_end":32},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"uint256\",","highlight_start":1,"highlight_end":41},{"text":"              \"name\": \"value\",","highlight_start":1,"highlight_end":31},{"text":"              \"type\": \"uint256\"","highlight_start":1,"highlight_end":32},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"uint256[4]\",","highlight_start":1,"highlight_end":44},{"text":"              \"name\": \"reserved\",","highlight_start":1,"highlight_end":34},{"text":"              \"type\": \"uint256[4]\"","highlight_start":1,"highlight_end":35},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"bytes\",","highlight_start":1,"highlight_end":39},{"text":"              \"name\": \"data\",","highlight_start":1,"highlight_end":30},{"text":"              \"type\": \"bytes\"","highlight_start":1,"highlight_end":30},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"bytes\",","highlight_start":1,"highlight_end":39},{"text":"              \"name\": \"signature\",","highlight_start":1,"highlight_end":35},{"text":"              \"type\": \"bytes\"","highlight_start":1,"highlight_end":30},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"bytes32[]\",","highlight_start":1,"highlight_end":43},{"text":"              \"name\": \"factoryDeps\",","highlight_start":1,"highlight_end":37},{"text":"              \"type\": \"bytes32[]\"","highlight_start":1,"highlight_end":34},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"bytes\",","highlight_start":1,"highlight_end":39},{"text":"              \"name\": \"paymasterInput\",","highlight_start":1,"highlight_end":40},{"text":"              \"type\": \"bytes\"","highlight_start":1,"highlight_end":30},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"              \"internalType\": \"bytes\",","highlight_start":1,"highlight_end":39},{"text":"              \"name\": \"reservedDynamic\",","highlight_start":1,"highlight_end":41},{"text":"              \"type\": \"bytes\"","highlight_start":1,"highlight_end":30},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"          ],","highlight_start":1,"highlight_end":13},{"text":"          \"internalType\": \"struct Transaction\",","highlight_start":1,"highlight_end":48},{"text":"          \"name\": \"_transaction\",","highlight_start":1,"highlight_end":34},{"text":"          \"type\": \"tuple\"","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      ],","highlight_start":1,"highlight_end":9},{"text":"      \"name\": \"validateAndPayForPaymasterTransaction\",","highlight_start":1,"highlight_end":55},{"text":"      \"outputs\": [","highlight_start":1,"highlight_end":19},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"internalType\": \"bytes4\",","highlight_start":1,"highlight_end":36},{"text":"          \"name\": \"magic\",","highlight_start":1,"highlight_end":27},{"text":"          \"type\": \"bytes4\"","highlight_start":1,"highlight_end":27},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"          \"internalType\": \"bytes\",","highlight_start":1,"highlight_end":35},{"text":"          \"name\": \"context\",","highlight_start":1,"highlight_end":29},{"text":"          \"type\": \"bytes\"","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      ],","highlight_start":1,"highlight_end":9},{"text":"      \"stateMutability\": \"payable\",","highlight_start":1,"highlight_end":36},{"text":"      \"type\": \"function\"","highlight_start":1,"highlight_end":25},{"text":"    },","highlight_start":1,"highlight_end":7},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      \"stateMutability\": \"payable\",","highlight_start":1,"highlight_end":36},{"text":"      \"type\": \"receive\"","highlight_start":1,"highlight_end":24},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  ]\"#;","highlight_start":1,"highlight_end":6}],"label":"expected `String`, found `&str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try using a conversion method","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":10660,"byte_end":10660,"line_start":442,"line_end":442,"column_start":6,"column_end":6,"is_primary":true,"text":[{"text":"  ]\"#;","highlight_start":6,"highlight_end":6}],"label":null,"suggested_replacement":".to_string()","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:49:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mconst paymaster_abi_json: String = r#\"[\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m____________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      \"inputs\": [\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m441\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m442\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  ]\"#;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: try using a conversion method: `.to_string()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `String`, found `&str`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":10765,"byte_end":10783,"line_start":445,"line_end":445,"column_start":53,"column_end":71,"is_primary":true,"text":[{"text":"const paymaster_abi: Json<T> = serde_json::from_str(paymaster_abi_json).expect(\"Failed to parse JSON\");","highlight_start":53,"highlight_end":71}],"label":"expected `&str`, found `String`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":10744,"byte_end":10764,"line_start":445,"line_end":445,"column_start":32,"column_end":52,"is_primary":false,"text":[{"text":"const paymaster_abi: Json<T> = serde_json::from_str(paymaster_abi_json).expect(\"Failed to parse JSON\");","highlight_start":32,"highlight_end":52}],"label":"arguments to this function are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"/home/dom/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.106/src/de.rs","byte_start":85368,"byte_end":85376,"line_start":2673,"line_end":2673,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"pub fn from_str<'a, T>(s: &'a str) -> Result<T>","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider borrowing here","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":10765,"byte_end":10765,"line_start":445,"line_end":445,"column_start":53,"column_end":53,"is_primary":true,"text":[{"text":"const paymaster_abi: Json<T> = serde_json::from_str(paymaster_abi_json).expect(\"Failed to parse JSON\");","highlight_start":53,"highlight_end":53}],"label":null,"suggested_replacement":"&","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:445:53\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m445\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mi: Json<T> = serde_json::from_str(paymaster_abi_json).expect(\"Failed t\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `&str`, found `String`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this function are incorrect\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/dom/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.106/src/de.rs:2673:8\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2673\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn from_str<'a, T>(s: &'a str) -> Result<T>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider borrowing here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m445\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mconst paymaster_abi: Json<T> = serde_json::from_str(\u001b[0m\u001b[0m\u001b[38;5;10m&\u001b[0m\u001b[0mpaymaster_abi_json).expect(\"Failed to parse JSON\");\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"message":"struct takes 2 generic arguments but 1 generic argument was supplied","code":{"code":"E0107","explanation":"An incorrect number of generic arguments was provided.\n\nErroneous code example:\n\n```compile_fail,E0107\nstruct Foo<T> { x: T }\n\nstruct Bar { x: Foo }             // error: wrong number of type arguments:\n                                  //        expected 1, found 0\nstruct Baz<S, T> { x: Foo<S, T> } // error: wrong number of type arguments:\n                                  //        expected 1, found 2\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool>(x);                 // error: wrong number of type arguments:\n                                    //        expected 2, found 1\n    foo::<bool, i32, i32>(x, 2, 4); // error: wrong number of type arguments:\n                                    //        expected 2, found 3\n    f::<'static>();                 // error: wrong number of lifetime arguments\n                                    //        expected 0, found 1\n}\n```\n\nWhen using/declaring an item with generic arguments, you must provide the exact\nsame number:\n\n```\nstruct Foo<T> { x: T }\n\nstruct Bar<T> { x: Foo<T> }               // ok!\nstruct Baz<S, T> { x: Foo<S>, y: Foo<T> } // ok!\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool, u32>(x, 12);              // ok!\n    f();                                  // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":44278,"byte_end":44284,"line_start":491,"line_end":491,"column_start":25,"column_end":31,"is_primary":true,"text":[{"text":"    let zk_sync_wallet: Wallet<LocalWallet> = from_wallet.into();","highlight_start":25,"highlight_end":31}],"label":"expected 2 generic arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":44285,"byte_end":44296,"line_start":491,"line_end":491,"column_start":32,"column_end":43,"is_primary":false,"text":[{"text":"    let zk_sync_wallet: Wallet<LocalWallet> = from_wallet.into();","highlight_start":32,"highlight_end":43}],"label":"supplied 1 generic argument","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"struct defined here, with 2 generic parameters: `S`, `P`","code":null,"level":"note","spans":[{"file_name":"/home/dom/.cargo/git/checkouts/zksync-c062bc98d159135b/82cfd3f/sdk/zksync-rs/src/wallet.rs","byte_start":400,"byte_end":401,"line_start":17,"line_end":17,"column_start":19,"column_end":20,"is_primary":false,"text":[{"text":"pub struct Wallet<S: EthereumSigner, P: Provider> {","highlight_start":19,"highlight_end":20}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/dom/.cargo/git/checkouts/zksync-c062bc98d159135b/82cfd3f/sdk/zksync-rs/src/wallet.rs","byte_start":419,"byte_end":420,"line_start":17,"line_end":17,"column_start":38,"column_end":39,"is_primary":false,"text":[{"text":"pub struct Wallet<S: EthereumSigner, P: Provider> {","highlight_start":38,"highlight_end":39}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/dom/.cargo/git/checkouts/zksync-c062bc98d159135b/82cfd3f/sdk/zksync-rs/src/wallet.rs","byte_start":393,"byte_end":399,"line_start":17,"line_end":17,"column_start":12,"column_end":18,"is_primary":true,"text":[{"text":"pub struct Wallet<S: EthereumSigner, P: Provider> {","highlight_start":12,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"add missing generic argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":44296,"byte_end":44296,"line_start":491,"line_end":491,"column_start":43,"column_end":43,"is_primary":true,"text":[{"text":"    let zk_sync_wallet: Wallet<LocalWallet> = from_wallet.into();","highlight_start":43,"highlight_end":43}],"label":null,"suggested_replacement":", P","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0107]\u001b[0m\u001b[0m\u001b[1m: struct takes 2 generic arguments but 1 generic argument was supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:491:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m491\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let zk_sync_wallet: Wallet<LocalWallet> = from_wallet.into();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msupplied 1 generic argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 2 generic arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: struct defined here, with 2 generic parameters: `S`, `P`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/dom/.cargo/git/checkouts/zksync-c062bc98d159135b/82cfd3f/sdk/zksync-rs/src/wallet.rs:17:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Wallet<S: EthereumSigner, P: Provider> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add missing generic argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m491\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let zk_sync_wallet: Wallet<LocalWallet\u001b[0m\u001b[0m\u001b[38;5;10m, P\u001b[0m\u001b[0m> = from_wallet.into();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m+++\u001b[0m\n\n"}
{"message":"the trait bound `ethers::ethers_signers::Wallet<ecdsa::signing::SigningKey<Secp256k1>>: zksync_eth_signer::EthereumSigner` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":44278,"byte_end":44297,"line_start":491,"line_end":491,"column_start":25,"column_end":44,"is_primary":true,"text":[{"text":"    let zk_sync_wallet: Wallet<LocalWallet> = from_wallet.into();","highlight_start":25,"highlight_end":44}],"label":"the trait `zksync_eth_signer::EthereumSigner` is not implemented for `ethers::ethers_signers::Wallet<ecdsa::signing::SigningKey<Secp256k1>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zksync_eth_signer::EthereumSigner`:\n  zksync_eth_signer::json_rpc_signer::JsonRpcSigner\n  zksync_eth_signer::pk_signer::PrivateKeySigner","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `zksync::Wallet`","code":null,"level":"note","spans":[{"file_name":"/home/dom/.cargo/git/checkouts/zksync-c062bc98d159135b/82cfd3f/sdk/zksync-rs/src/wallet.rs","byte_start":403,"byte_end":417,"line_start":17,"line_end":17,"column_start":22,"column_end":36,"is_primary":true,"text":[{"text":"pub struct Wallet<S: EthereumSigner, P: Provider> {","highlight_start":22,"highlight_end":36}],"label":"required by this bound in `Wallet`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `ethers::ethers_signers::Wallet<ecdsa::signing::SigningKey<Secp256k1>>: zksync_eth_signer::EthereumSigner` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:491:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m491\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let zk_sync_wallet: Wallet<LocalWallet> = from_wallet.into();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zksync_eth_signer::EthereumSigner` is not implemented for `ethers::ethers_signers::Wallet<ecdsa::signing::SigningKey<Secp256k1>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `zksync_eth_signer::EthereumSigner`:\u001b[0m\n\u001b[0m              zksync_eth_signer::json_rpc_signer::JsonRpcSigner\u001b[0m\n\u001b[0m              zksync_eth_signer::pk_signer::PrivateKeySigner\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `zksync::Wallet`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/dom/.cargo/git/checkouts/zksync-c062bc98d159135b/82cfd3f/sdk/zksync-rs/src/wallet.rs:17:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Wallet<S: EthereumSigner, P: Provider> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Wallet`\u001b[0m\n\n"}
{"message":"the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `FromResidual`)","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":44087,"byte_end":44088,"line_start":485,"line_end":485,"column_start":65,"column_end":66,"is_primary":true,"text":[{"text":"    Provider::<Http>::try_from(\"https://testnet.era.zksync.dev\")?.interval(Duration::from_millis(10u64));","highlight_start":65,"highlight_end":66}],"label":"cannot use the `?` operator in an async function that returns `&str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":44087,"byte_end":44088,"line_start":485,"line_end":485,"column_start":65,"column_end":66,"is_primary":false,"text":[{"text":"    Provider::<Http>::try_from(\"https://testnet.era.zksync.dev\")?.interval(Duration::from_millis(10u64));","highlight_start":65,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":44001,"byte_end":47707,"line_start":482,"line_end":585,"column_start":38,"column_end":2,"is_primary":false,"text":[{"text":"async fn send_usdc() -> &'static str {","highlight_start":38,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let provider =","highlight_start":1,"highlight_end":19},{"text":"    Provider::<Http>::try_from(\"https://testnet.era.zksync.dev\")?.interval(Duration::from_millis(10u64));","highlight_start":1,"highlight_end":106},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let chain_id: i32 = 280; ","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let from_wallet: LocalWallet = USDC_SENDER_PRIVATE_KEY.parse::<LocalWallet>().unwrap();","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let zk_sync_wallet: Wallet<LocalWallet> = from_wallet.into();","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let to_address = payload.address.parse::<Address>()?;","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let amount = payload.amount;","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let usdc_token_addr = \"0xcA3e71672Aa060Fe7FFA71664ecc08E41E62B9Eb\".parse::<Address>()?;","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // ABIGEN for ERC20 Contract","highlight_start":1,"highlight_end":37},{"text":"        abigen!(","highlight_start":1,"highlight_end":17},{"text":"            ERC20Contract,","highlight_start":1,"highlight_end":27},{"text":"            r#\"[","highlight_start":1,"highlight_end":17},{"text":"                function balanceOf(address account) external view returns (uint256)","highlight_start":1,"highlight_end":84},{"text":"                function decimals() external view returns (uint8)","highlight_start":1,"highlight_end":66},{"text":"                function symbol() external view returns (string memory)","highlight_start":1,"highlight_end":72},{"text":"                function transfer(address to, uint256 amount) external returns (bool)","highlight_start":1,"highlight_end":86},{"text":"                event Transfer(address indexed from, address indexed to, uint256 value)","highlight_start":1,"highlight_end":88},{"text":"            ]\"#,","highlight_start":1,"highlight_end":17},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"     // Contract Signer","highlight_start":1,"highlight_end":24},{"text":"    let signer = Arc::new(SignerMiddleware::new(provider, from_wallet.with_chain_id(chain_id.as_u64())));","highlight_start":1,"highlight_end":106},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let contract = ERC20Contract::new(usdc_token_addr, signer);","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let gas_price = provider.get_gas_price().await?;","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let paymaster_factory = ContractFactory::new(paymaster_abi, paymaster_bytecode, zk_sync_wallet);","highlight_start":1,"highlight_end":101},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let paymaster_contract = paymaster_factory.attach(PAYMASTER_ADDRESS);","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let whole_amount: u64 = 8;","highlight_start":1,"highlight_end":31},{"text":"    let decimals = contract.decimals().call();","highlight_start":1,"highlight_end":47},{"text":"    let decimal_amount = U256::from(whole_amount) * U256::exp18(decimals as usize);","highlight_start":1,"highlight_end":84},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ETH USD ","highlight_start":1,"highlight_end":16},{"text":"    let ETHUSD = PaymasterContract.readDapi(\"0x28ce555ee7a3daCdC305951974FcbA59F5BdF09b\");","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // USDC USD","highlight_start":1,"highlight_end":16},{"text":"    let USDCUSD = PaymasterContract.readDapi(\"0x946E3232Cc18E812895A8e83CaE3d0caA241C2AB\");","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    println!(\"ETH/USD dAPI Value: {}\", ETHUSD);","highlight_start":1,"highlight_end":48},{"text":"    println!(\"USDC/USD dAPI Value: {}\", USDCUSD);","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Encoding the \"ApprovalBased\" paymaster flow's input","highlight_start":1,"highlight_end":59},{"text":"    let paymasterParams = utils.getPaymasterParams(PAYMASTER_ADDRESS, {","highlight_start":1,"highlight_end":72},{"text":"        params_type: \"ApprovalBased\",","highlight_start":1,"highlight_end":38},{"text":"        token: USDC_CONTRACT,","highlight_start":1,"highlight_end":30},{"text":"        // set minimalAllowance to the estimated fee in erc20","highlight_start":1,"highlight_end":62},{"text":"        minimalAllowance: ethers.BigNumber.from(usdFee),","highlight_start":1,"highlight_end":57},{"text":"        // empty bytes as testnet paymaster does not use innerInput","highlight_start":1,"highlight_end":68},{"text":"        innerInput: new Uint8Array(),","highlight_start":1,"highlight_end":38},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    println!(\"FROM this L2 wallet: {}\", ethers.utils.formatUnits(await zkSyncProvider.getBalance(zkSyncWallet.address, \"latest\", USDC_CONTRACT), 18));","highlight_start":1,"highlight_end":151},{"text":"    println!(\"TO receiver wallet: {}\", ethers.utils.formatUnits(await zkSyncProvider.getBalance(receiverWallet, \"latest\", USDC_CONTRACT), 18));","highlight_start":1,"highlight_end":144},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Transfer Tx","highlight_start":1,"highlight_end":19},{"text":"    let transfer_tx = contract","highlight_start":1,"highlight_end":31},{"text":"        .transfer(to_address, decimal_amount, {","highlight_start":1,"highlight_end":48},{"text":"            // specify gas values","highlight_start":1,"highlight_end":34},{"text":"            maxFeePerGas: gasPrice,","highlight_start":1,"highlight_end":36},{"text":"            maxPriorityFeePerGas: 0,","highlight_start":1,"highlight_end":37},{"text":"            gasLimit: gasLimit,","highlight_start":1,"highlight_end":32},{"text":"            // paymaster info","highlight_start":1,"highlight_end":30},{"text":"            customData: {","highlight_start":1,"highlight_end":26},{"text":"              paymasterParams: paymasterParams,","highlight_start":1,"highlight_end":48},{"text":"              gasPerPubdata: utils.DEFAULT_GAS_PER_PUBDATA_LIMIT,","highlight_start":1,"highlight_end":66},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"          })","highlight_start":1,"highlight_end":13},{"text":"        .await?;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let pending_tx = transfer_tx.send().await?;","highlight_start":1,"highlight_end":48},{"text":"    let _mined_tx = pending_tx.await?;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    println!(\"Transaction Receipt: {}\", serde_json::to_string(&_mined_tx)?);","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Extract the tx hash for printing","highlight_start":1,"highlight_end":40},{"text":"    let json_str = serde_json::to_string(&_mined_tx)?;","highlight_start":1,"highlight_end":55},{"text":"    let json: Value = serde_json::from_str(&json_str)?;","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    if let Some(transaction_hash) = json[\"transactionHash\"].as_str() {","highlight_start":1,"highlight_end":71},{"text":"        println!(\"\\n URL: https://zksync2-testnet.zkscan.io/{}\", transaction_hash);","highlight_start":1,"highlight_end":84},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"        println!(\"Transaction Hash not found\");","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    // Return ","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    \"USDC Sent!\"","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"this function should return `Result` or `Option` to accept `?`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `FromResidual<std::result::Result<Infallible, url::parser::ParseError>>` is not implemented for `&str`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `FromResidual`)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:485:65\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m482\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0masync fn send_usdc() -> &'static str {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m______________________________________-\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m483\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m484\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let provider =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m485\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Provider::<Http>::try_from(\"https://testnet.era.zksync.dev\")?.interv\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot use the `?` operator in an async function that returns `&str`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m584\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m585\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis function should return `Result` or `Option` to accept `?`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `FromResidual<std::result::Result<Infallible, url::parser::ParseError>>` is not implemented for `&str`\u001b[0m\n\n"}
{"message":"the trait bound `ethers::ethers_signers::Wallet<ecdsa::signing::SigningKey<Secp256k1>>: zksync_eth_signer::EthereumSigner` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":44300,"byte_end":44318,"line_start":491,"line_end":491,"column_start":47,"column_end":65,"is_primary":true,"text":[{"text":"    let zk_sync_wallet: Wallet<LocalWallet> = from_wallet.into();","highlight_start":47,"highlight_end":65}],"label":"the trait `zksync_eth_signer::EthereumSigner` is not implemented for `ethers::ethers_signers::Wallet<ecdsa::signing::SigningKey<Secp256k1>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `zksync_eth_signer::EthereumSigner`:\n  zksync_eth_signer::json_rpc_signer::JsonRpcSigner\n  zksync_eth_signer::pk_signer::PrivateKeySigner","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `zksync::Wallet`","code":null,"level":"note","spans":[{"file_name":"/home/dom/.cargo/git/checkouts/zksync-c062bc98d159135b/82cfd3f/sdk/zksync-rs/src/wallet.rs","byte_start":403,"byte_end":417,"line_start":17,"line_end":17,"column_start":22,"column_end":36,"is_primary":true,"text":[{"text":"pub struct Wallet<S: EthereumSigner, P: Provider> {","highlight_start":22,"highlight_end":36}],"label":"required by this bound in `Wallet`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `ethers::ethers_signers::Wallet<ecdsa::signing::SigningKey<Secp256k1>>: zksync_eth_signer::EthereumSigner` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:491:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m491\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let zk_sync_wallet: Wallet<LocalWallet> = from_wallet.into();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `zksync_eth_signer::EthereumSigner` is not implemented for `ethers::ethers_signers::Wallet<ecdsa::signing::SigningKey<Secp256k1>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `zksync_eth_signer::EthereumSigner`:\u001b[0m\n\u001b[0m              zksync_eth_signer::json_rpc_signer::JsonRpcSigner\u001b[0m\n\u001b[0m              zksync_eth_signer::pk_signer::PrivateKeySigner\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `zksync::Wallet`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/dom/.cargo/git/checkouts/zksync-c062bc98d159135b/82cfd3f/sdk/zksync-rs/src/wallet.rs:17:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Wallet<S: EthereumSigner, P: Provider> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Wallet`\u001b[0m\n\n"}
{"message":"the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `FromResidual`)","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":44503,"byte_end":44504,"line_start":497,"line_end":497,"column_start":90,"column_end":91,"is_primary":true,"text":[{"text":"    let usdc_token_addr = \"0xcA3e71672Aa060Fe7FFA71664ecc08E41E62B9Eb\".parse::<Address>()?;","highlight_start":90,"highlight_end":91}],"label":"cannot use the `?` operator in an async function that returns `&str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":44503,"byte_end":44504,"line_start":497,"line_end":497,"column_start":90,"column_end":91,"is_primary":false,"text":[{"text":"    let usdc_token_addr = \"0xcA3e71672Aa060Fe7FFA71664ecc08E41E62B9Eb\".parse::<Address>()?;","highlight_start":90,"highlight_end":91}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":44001,"byte_end":47707,"line_start":482,"line_end":585,"column_start":38,"column_end":2,"is_primary":false,"text":[{"text":"async fn send_usdc() -> &'static str {","highlight_start":38,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let provider =","highlight_start":1,"highlight_end":19},{"text":"    Provider::<Http>::try_from(\"https://testnet.era.zksync.dev\")?.interval(Duration::from_millis(10u64));","highlight_start":1,"highlight_end":106},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let chain_id: i32 = 280; ","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let from_wallet: LocalWallet = USDC_SENDER_PRIVATE_KEY.parse::<LocalWallet>().unwrap();","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let zk_sync_wallet: Wallet<LocalWallet> = from_wallet.into();","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let to_address = payload.address.parse::<Address>()?;","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let amount = payload.amount;","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let usdc_token_addr = \"0xcA3e71672Aa060Fe7FFA71664ecc08E41E62B9Eb\".parse::<Address>()?;","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // ABIGEN for ERC20 Contract","highlight_start":1,"highlight_end":37},{"text":"        abigen!(","highlight_start":1,"highlight_end":17},{"text":"            ERC20Contract,","highlight_start":1,"highlight_end":27},{"text":"            r#\"[","highlight_start":1,"highlight_end":17},{"text":"                function balanceOf(address account) external view returns (uint256)","highlight_start":1,"highlight_end":84},{"text":"                function decimals() external view returns (uint8)","highlight_start":1,"highlight_end":66},{"text":"                function symbol() external view returns (string memory)","highlight_start":1,"highlight_end":72},{"text":"                function transfer(address to, uint256 amount) external returns (bool)","highlight_start":1,"highlight_end":86},{"text":"                event Transfer(address indexed from, address indexed to, uint256 value)","highlight_start":1,"highlight_end":88},{"text":"            ]\"#,","highlight_start":1,"highlight_end":17},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"     // Contract Signer","highlight_start":1,"highlight_end":24},{"text":"    let signer = Arc::new(SignerMiddleware::new(provider, from_wallet.with_chain_id(chain_id.as_u64())));","highlight_start":1,"highlight_end":106},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let contract = ERC20Contract::new(usdc_token_addr, signer);","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let gas_price = provider.get_gas_price().await?;","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let paymaster_factory = ContractFactory::new(paymaster_abi, paymaster_bytecode, zk_sync_wallet);","highlight_start":1,"highlight_end":101},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let paymaster_contract = paymaster_factory.attach(PAYMASTER_ADDRESS);","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let whole_amount: u64 = 8;","highlight_start":1,"highlight_end":31},{"text":"    let decimals = contract.decimals().call();","highlight_start":1,"highlight_end":47},{"text":"    let decimal_amount = U256::from(whole_amount) * U256::exp18(decimals as usize);","highlight_start":1,"highlight_end":84},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ETH USD ","highlight_start":1,"highlight_end":16},{"text":"    let ETHUSD = PaymasterContract.readDapi(\"0x28ce555ee7a3daCdC305951974FcbA59F5BdF09b\");","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // USDC USD","highlight_start":1,"highlight_end":16},{"text":"    let USDCUSD = PaymasterContract.readDapi(\"0x946E3232Cc18E812895A8e83CaE3d0caA241C2AB\");","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    println!(\"ETH/USD dAPI Value: {}\", ETHUSD);","highlight_start":1,"highlight_end":48},{"text":"    println!(\"USDC/USD dAPI Value: {}\", USDCUSD);","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Encoding the \"ApprovalBased\" paymaster flow's input","highlight_start":1,"highlight_end":59},{"text":"    let paymasterParams = utils.getPaymasterParams(PAYMASTER_ADDRESS, {","highlight_start":1,"highlight_end":72},{"text":"        params_type: \"ApprovalBased\",","highlight_start":1,"highlight_end":38},{"text":"        token: USDC_CONTRACT,","highlight_start":1,"highlight_end":30},{"text":"        // set minimalAllowance to the estimated fee in erc20","highlight_start":1,"highlight_end":62},{"text":"        minimalAllowance: ethers.BigNumber.from(usdFee),","highlight_start":1,"highlight_end":57},{"text":"        // empty bytes as testnet paymaster does not use innerInput","highlight_start":1,"highlight_end":68},{"text":"        innerInput: new Uint8Array(),","highlight_start":1,"highlight_end":38},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    println!(\"FROM this L2 wallet: {}\", ethers.utils.formatUnits(await zkSyncProvider.getBalance(zkSyncWallet.address, \"latest\", USDC_CONTRACT), 18));","highlight_start":1,"highlight_end":151},{"text":"    println!(\"TO receiver wallet: {}\", ethers.utils.formatUnits(await zkSyncProvider.getBalance(receiverWallet, \"latest\", USDC_CONTRACT), 18));","highlight_start":1,"highlight_end":144},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Transfer Tx","highlight_start":1,"highlight_end":19},{"text":"    let transfer_tx = contract","highlight_start":1,"highlight_end":31},{"text":"        .transfer(to_address, decimal_amount, {","highlight_start":1,"highlight_end":48},{"text":"            // specify gas values","highlight_start":1,"highlight_end":34},{"text":"            maxFeePerGas: gasPrice,","highlight_start":1,"highlight_end":36},{"text":"            maxPriorityFeePerGas: 0,","highlight_start":1,"highlight_end":37},{"text":"            gasLimit: gasLimit,","highlight_start":1,"highlight_end":32},{"text":"            // paymaster info","highlight_start":1,"highlight_end":30},{"text":"            customData: {","highlight_start":1,"highlight_end":26},{"text":"              paymasterParams: paymasterParams,","highlight_start":1,"highlight_end":48},{"text":"              gasPerPubdata: utils.DEFAULT_GAS_PER_PUBDATA_LIMIT,","highlight_start":1,"highlight_end":66},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"          })","highlight_start":1,"highlight_end":13},{"text":"        .await?;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let pending_tx = transfer_tx.send().await?;","highlight_start":1,"highlight_end":48},{"text":"    let _mined_tx = pending_tx.await?;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    println!(\"Transaction Receipt: {}\", serde_json::to_string(&_mined_tx)?);","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Extract the tx hash for printing","highlight_start":1,"highlight_end":40},{"text":"    let json_str = serde_json::to_string(&_mined_tx)?;","highlight_start":1,"highlight_end":55},{"text":"    let json: Value = serde_json::from_str(&json_str)?;","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    if let Some(transaction_hash) = json[\"transactionHash\"].as_str() {","highlight_start":1,"highlight_end":71},{"text":"        println!(\"\\n URL: https://zksync2-testnet.zkscan.io/{}\", transaction_hash);","highlight_start":1,"highlight_end":84},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"        println!(\"Transaction Hash not found\");","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    // Return ","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    \"USDC Sent!\"","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"this function should return `Result` or `Option` to accept `?`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `FromResidual<std::result::Result<Infallible, rustc_hex::FromHexError>>` is not implemented for `&str`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `FromResidual`)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:497:90\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m482\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0masync fn send_usdc() -> &'static str {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m______________________________________-\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m483\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m484\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let provider =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m485\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Provider::<Http>::try_from(\"https://testnet.era.zksync.dev\")?.interval(Duration::from_mil\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m497\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let usdc_token_addr = \"0xcA3e71672Aa060Fe7FFA71664ecc08E41E62B9Eb\".parse::<Address>(\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot use the `?` operator in an async function that returns `&str`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m584\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m585\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis function should return `Result` or `Option` to accept `?`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `FromResidual<std::result::Result<Infallible, rustc_hex::FromHexError>>` is not implemented for `&str`\u001b[0m\n\n"}
{"message":"no method named `with_chain_id` found for struct `ethers::ethers_signers::Wallet` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":45124,"byte_end":45137,"line_start":512,"line_end":512,"column_start":71,"column_end":84,"is_primary":true,"text":[{"text":"    let signer = Arc::new(SignerMiddleware::new(provider, from_wallet.with_chain_id(chain_id.as_u64())));","highlight_start":71,"highlight_end":84}],"label":"method not found in `Wallet<SigningKey<Secp256k1>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/dom/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ethers-signers-2.0.10/src/lib.rs","byte_start":2786,"byte_end":2799,"line_start":85,"line_end":85,"column_start":8,"column_end":21,"is_primary":false,"text":[{"text":"    fn with_chain_id<T: Into<u64>>(self, chain_id: T) -> Self;","highlight_start":8,"highlight_end":21}],"label":"the method is available for `ethers::ethers_signers::Wallet<ecdsa::signing::SigningKey<Secp256k1>>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following trait is implemented but not in scope; perhaps add a `use` for it:","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":156,"byte_end":156,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use axum::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use ethers::ethers_signers::Signer;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `with_chain_id` found for struct `ethers::ethers_signers::Wallet` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:512:71\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m512\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0met.with_chain_id(chain_id.as_u64())));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Wallet<SigningKey<Secp256k1>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/dom/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ethers-signers-2.0.10/src/lib.rs:85:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn with_chain_id<T: Into<u64>>(self, chain_id: T) -> Self;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `ethers::ethers_signers::Wallet<ecdsa::signing::SigningKey<Secp256k1>>` here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the following trait is implemented but not in scope; perhaps add a `use` for it:\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use ethers::ethers_signers::Signer;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"no method named `as_u64` found for type `i32` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":45147,"byte_end":45153,"line_start":512,"line_end":512,"column_start":94,"column_end":100,"is_primary":true,"text":[{"text":"    let signer = Arc::new(SignerMiddleware::new(provider, from_wallet.with_chain_id(chain_id.as_u64())));","highlight_start":94,"highlight_end":100}],"label":"method not found in `i32`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/dom/.cargo/registry/src/index.crates.io-6f17d22bba15001f/funty-2.0.0/src/lib.rs","byte_start":3094,"byte_end":3100,"line_start":147,"line_end":147,"column_start":6,"column_end":12,"is_primary":false,"text":[{"text":"\t\tfn as_u64(self) -> u64;","highlight_start":6,"highlight_end":12}],"label":"the method is available for `i32` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following trait is implemented but not in scope; perhaps add a `use` for it:","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":156,"byte_end":156,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use axum::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use funty::Fundamental;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `as_u64` found for type `i32` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:512:94\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m512\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m_chain_id(chain_id.as_u64())));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `i32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/dom/.cargo/registry/src/index.crates.io-6f17d22bba15001f/funty-2.0.0/src/lib.rs:147:6\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn as_u64(self) -> u64;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `i32` here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the following trait is implemented but not in scope; perhaps add a `use` for it:\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use funty::Fundamental;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"no method named `get_gas_price` found for struct `ethers::ethers_providers::Provider` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":45255,"byte_end":45268,"line_start":516,"line_end":516,"column_start":30,"column_end":43,"is_primary":true,"text":[{"text":"    let gas_price = provider.get_gas_price().await?;","highlight_start":30,"highlight_end":43}],"label":"method not found in `Provider<Http>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/dom/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ethers-providers-2.0.10/src/middleware.rs","byte_start":16725,"byte_end":16738,"line_start":428,"line_end":428,"column_start":14,"column_end":27,"is_primary":false,"text":[{"text":"    async fn get_gas_price(&self) -> Result<U256, Self::Error> {","highlight_start":14,"highlight_end":27}],"label":"the method is available for `ethers::ethers_providers::Provider<ethers::ethers_providers::Http>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following trait is implemented but not in scope; perhaps add a `use` for it:","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":156,"byte_end":156,"line_start":7,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use axum::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use ethers::ethers_middleware::Middleware;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `get_gas_price` found for struct `ethers::ethers_providers::Provider` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:516:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m516\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let gas_price = provider.get_gas_price().await?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Provider<Http>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/dom/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ethers-providers-2.0.10/src/middleware.rs:428:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m428\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn get_gas_price(&self) -> Result<U256, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `ethers::ethers_providers::Provider<ethers::ethers_providers::Http>` here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the following trait is implemented but not in scope; perhaps add a `use` for it:\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use ethers::ethers_middleware::Middleware;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `FromResidual`)","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":45276,"byte_end":45277,"line_start":516,"line_end":516,"column_start":51,"column_end":52,"is_primary":true,"text":[{"text":"    let gas_price = provider.get_gas_price().await?;","highlight_start":51,"highlight_end":52}],"label":"cannot use the `?` operator in an async function that returns `&str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":45276,"byte_end":45277,"line_start":516,"line_end":516,"column_start":51,"column_end":52,"is_primary":false,"text":[{"text":"    let gas_price = provider.get_gas_price().await?;","highlight_start":51,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":44001,"byte_end":47707,"line_start":482,"line_end":585,"column_start":38,"column_end":2,"is_primary":false,"text":[{"text":"async fn send_usdc() -> &'static str {","highlight_start":38,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let provider =","highlight_start":1,"highlight_end":19},{"text":"    Provider::<Http>::try_from(\"https://testnet.era.zksync.dev\")?.interval(Duration::from_millis(10u64));","highlight_start":1,"highlight_end":106},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let chain_id: i32 = 280; ","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let from_wallet: LocalWallet = USDC_SENDER_PRIVATE_KEY.parse::<LocalWallet>().unwrap();","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let zk_sync_wallet: Wallet<LocalWallet> = from_wallet.into();","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let to_address = payload.address.parse::<Address>()?;","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let amount = payload.amount;","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let usdc_token_addr = \"0xcA3e71672Aa060Fe7FFA71664ecc08E41E62B9Eb\".parse::<Address>()?;","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // ABIGEN for ERC20 Contract","highlight_start":1,"highlight_end":37},{"text":"        abigen!(","highlight_start":1,"highlight_end":17},{"text":"            ERC20Contract,","highlight_start":1,"highlight_end":27},{"text":"            r#\"[","highlight_start":1,"highlight_end":17},{"text":"                function balanceOf(address account) external view returns (uint256)","highlight_start":1,"highlight_end":84},{"text":"                function decimals() external view returns (uint8)","highlight_start":1,"highlight_end":66},{"text":"                function symbol() external view returns (string memory)","highlight_start":1,"highlight_end":72},{"text":"                function transfer(address to, uint256 amount) external returns (bool)","highlight_start":1,"highlight_end":86},{"text":"                event Transfer(address indexed from, address indexed to, uint256 value)","highlight_start":1,"highlight_end":88},{"text":"            ]\"#,","highlight_start":1,"highlight_end":17},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"     // Contract Signer","highlight_start":1,"highlight_end":24},{"text":"    let signer = Arc::new(SignerMiddleware::new(provider, from_wallet.with_chain_id(chain_id.as_u64())));","highlight_start":1,"highlight_end":106},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let contract = ERC20Contract::new(usdc_token_addr, signer);","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let gas_price = provider.get_gas_price().await?;","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let paymaster_factory = ContractFactory::new(paymaster_abi, paymaster_bytecode, zk_sync_wallet);","highlight_start":1,"highlight_end":101},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let paymaster_contract = paymaster_factory.attach(PAYMASTER_ADDRESS);","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let whole_amount: u64 = 8;","highlight_start":1,"highlight_end":31},{"text":"    let decimals = contract.decimals().call();","highlight_start":1,"highlight_end":47},{"text":"    let decimal_amount = U256::from(whole_amount) * U256::exp18(decimals as usize);","highlight_start":1,"highlight_end":84},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ETH USD ","highlight_start":1,"highlight_end":16},{"text":"    let ETHUSD = PaymasterContract.readDapi(\"0x28ce555ee7a3daCdC305951974FcbA59F5BdF09b\");","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // USDC USD","highlight_start":1,"highlight_end":16},{"text":"    let USDCUSD = PaymasterContract.readDapi(\"0x946E3232Cc18E812895A8e83CaE3d0caA241C2AB\");","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    println!(\"ETH/USD dAPI Value: {}\", ETHUSD);","highlight_start":1,"highlight_end":48},{"text":"    println!(\"USDC/USD dAPI Value: {}\", USDCUSD);","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Encoding the \"ApprovalBased\" paymaster flow's input","highlight_start":1,"highlight_end":59},{"text":"    let paymasterParams = utils.getPaymasterParams(PAYMASTER_ADDRESS, {","highlight_start":1,"highlight_end":72},{"text":"        params_type: \"ApprovalBased\",","highlight_start":1,"highlight_end":38},{"text":"        token: USDC_CONTRACT,","highlight_start":1,"highlight_end":30},{"text":"        // set minimalAllowance to the estimated fee in erc20","highlight_start":1,"highlight_end":62},{"text":"        minimalAllowance: ethers.BigNumber.from(usdFee),","highlight_start":1,"highlight_end":57},{"text":"        // empty bytes as testnet paymaster does not use innerInput","highlight_start":1,"highlight_end":68},{"text":"        innerInput: new Uint8Array(),","highlight_start":1,"highlight_end":38},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    println!(\"FROM this L2 wallet: {}\", ethers.utils.formatUnits(await zkSyncProvider.getBalance(zkSyncWallet.address, \"latest\", USDC_CONTRACT), 18));","highlight_start":1,"highlight_end":151},{"text":"    println!(\"TO receiver wallet: {}\", ethers.utils.formatUnits(await zkSyncProvider.getBalance(receiverWallet, \"latest\", USDC_CONTRACT), 18));","highlight_start":1,"highlight_end":144},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Transfer Tx","highlight_start":1,"highlight_end":19},{"text":"    let transfer_tx = contract","highlight_start":1,"highlight_end":31},{"text":"        .transfer(to_address, decimal_amount, {","highlight_start":1,"highlight_end":48},{"text":"            // specify gas values","highlight_start":1,"highlight_end":34},{"text":"            maxFeePerGas: gasPrice,","highlight_start":1,"highlight_end":36},{"text":"            maxPriorityFeePerGas: 0,","highlight_start":1,"highlight_end":37},{"text":"            gasLimit: gasLimit,","highlight_start":1,"highlight_end":32},{"text":"            // paymaster info","highlight_start":1,"highlight_end":30},{"text":"            customData: {","highlight_start":1,"highlight_end":26},{"text":"              paymasterParams: paymasterParams,","highlight_start":1,"highlight_end":48},{"text":"              gasPerPubdata: utils.DEFAULT_GAS_PER_PUBDATA_LIMIT,","highlight_start":1,"highlight_end":66},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"          })","highlight_start":1,"highlight_end":13},{"text":"        .await?;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let pending_tx = transfer_tx.send().await?;","highlight_start":1,"highlight_end":48},{"text":"    let _mined_tx = pending_tx.await?;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    println!(\"Transaction Receipt: {}\", serde_json::to_string(&_mined_tx)?);","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Extract the tx hash for printing","highlight_start":1,"highlight_end":40},{"text":"    let json_str = serde_json::to_string(&_mined_tx)?;","highlight_start":1,"highlight_end":55},{"text":"    let json: Value = serde_json::from_str(&json_str)?;","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    if let Some(transaction_hash) = json[\"transactionHash\"].as_str() {","highlight_start":1,"highlight_end":71},{"text":"        println!(\"\\n URL: https://zksync2-testnet.zkscan.io/{}\", transaction_hash);","highlight_start":1,"highlight_end":84},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"        println!(\"Transaction Hash not found\");","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    // Return ","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    \"USDC Sent!\"","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"this function should return `Result` or `Option` to accept `?`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `FromResidual<_>` is not implemented for `&str`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `FromResidual`)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:516:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m482\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0masync fn send_usdc() -> &'static str {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m______________________________________-\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m483\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m484\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let provider =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m485\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Provider::<Http>::try_from(\"https://testnet.era.zksync.dev\")?.interv\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m516\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let gas_price = provider.get_gas_price().await?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot use the `?` operator in an async function that returns `&str`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m584\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m585\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis function should return `Result` or `Option` to accept `?`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `FromResidual<_>` is not implemented for `&str`\u001b[0m\n\n"}
{"message":"no method named `attach` found for struct `DeploymentTxFactory` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":45429,"byte_end":45435,"line_start":520,"line_end":520,"column_start":48,"column_end":54,"is_primary":true,"text":[{"text":"    let paymaster_contract = paymaster_factory.attach(PAYMASTER_ADDRESS);","highlight_start":48,"highlight_end":54}],"label":"method not found in `DeploymentTxFactory<Arc<_>, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `attach` found for struct `DeploymentTxFactory` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:520:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m520\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let paymaster_contract = paymaster_factory.attach(PAYMASTER_ADDRESS);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `DeploymentTxFactory<Arc<_>, _>`\u001b[0m\n\n"}
{"message":"no function or associated item named `exp18` found for struct `ethers::types::U256` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":45593,"byte_end":45598,"line_start":524,"line_end":524,"column_start":59,"column_end":64,"is_primary":true,"text":[{"text":"    let decimal_amount = U256::from(whole_amount) * U256::exp18(decimals as usize);","highlight_start":59,"highlight_end":64}],"label":"function or associated item not found in `U256`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there is an associated function with a similar name","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":45593,"byte_end":45598,"line_start":524,"line_end":524,"column_start":59,"column_end":64,"is_primary":true,"text":[{"text":"    let decimal_amount = U256::from(whole_amount) * U256::exp18(decimals as usize);","highlight_start":59,"highlight_end":64}],"label":null,"suggested_replacement":"exp10","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no function or associated item named `exp18` found for struct `ethers::types::U256` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:524:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m524\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mfrom(whole_amount) * U256::exp18(decimals as usize);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `U256`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: there is an associated function with a similar name: `exp10`\u001b[0m\n\n"}
{"message":"aborting due to 24 previous errors; 3 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 24 previous errors; 3 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0107, E0252, E0277, E0308, E0412, E0425, E0432, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0107, E0252, E0277, E0308, E0412, E0425, E0432, E0599.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0107`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0107`.\u001b[0m\n"}
